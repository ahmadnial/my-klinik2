
var warna = "#e60f00";
// $("#color").click(function(){
// 		warna = this.value;
// 		console.log("sampai sini ndak?");
// 	})

function Coret(n) {	
	const t = this;
	this.type = n.type || "default";
	this.opr_tray = document.createElement(`div`);
	const i = this.type === "pointing" ? "" : `<button type="button" class="btn btn-primary border-radius3 start"
	title="Aktifkan Penanda" >
	<i class="fa fa-pencil-alt"></i>
	</button>`;
	this.opr_tray.innerHTML = `<div class="tombol" style="display:none">
	<div class="btn" id="buttons">
	<input type="color" class="color" value="${warna}" style="border:none; border-radius:0; padding:0px;">
	</div>  
	<div class="btn-group" role="group" style="border: none !important;">
	${i}
	<button type="button" class="btn btn-warning undo" title="Undo" >
	<i class="fa fa-undo"></i>
	</button>
	<button type="button" class="btn btn-success stop" title="Selesai Menandai" >
	<i class="fa fa-check"></i>
	</button>
	<button type="button" class="btn btn-danger border-radius3 clear" title="Bersihkan Semua Tanda" >
	<i class="fa fa-eraser"></i>
	</button>
	</div>
	<div class="alert alert-warning belum">
	<p>
	<i class="fa fa-exclamation-triangle"></i>
	Penandaan Belum Disimpan
	</p>
	</div>
	<div class="alert alert-success sudah">
	<p>
	<i class="fa fa-check-square"></i>
	Penandaan Disimpan
	</p>
	</div>
	</div>
	`;

	this.cvs = document.getElementById(n.cvs);
	this.src = n.src;
	this.ctx = this.cvs.getContext("2d");
	this.posX = 0;
	this.posY = 0;
	this.img = new Image;
	this.img.onload = function () {
		t.ctx.drawImage(t.img, 0, 0)
	};
	this.img.src = this.src;
	this.signaturePad = null;
	this.btn = null;
	this.textMark = "";
	this.pointingConfig = {
		fontColor: "red",
		fontFamily: "Arial",
		fontSize: "24px"
	};
	this.saveHistory = [];
	this.historyNumber = -1;
	this.warnaBtn=this.opr_tray.querySelector(".color");
	this.stopBtn = this.opr_tray.querySelector(".stop");
	this.clearBtn = this.opr_tray.querySelector(".clear");
	this.undoBtn = this.opr_tray.querySelector(".undo");
	this.notDone = this.opr_tray.querySelector(".belum");
	this.done = this.opr_tray.querySelector(".sudah");
	this.notDone.style.display = "none";
	this.done.style.display = "none";
	this.imgData = document.getElementById(n.imgData);
	// if((n.pointingConfig || this.pointingConfig) && this.type === "pointing" )
	// 	this.btn = document.getElementsByClassName(n.pointingBtn)
	// if(n.pointingConfig || this.pointingConfig)
	// 	signaturePad =new SignaturePad(t.cvs);
	// signaturePad.penColor= warna;
	// signaturePad.minWidth= 1.5;
	// signaturePad.maxWidth= 1.5;
	// signaturePad.throttle= 0;
	// signaturePad.velocityFilterWeight= .1;
	this.type === "hybrid" ? (this.signaturePad = new SignaturePad(t.cvs), this.btn = document.getElementsByClassName(n.pointingBtn), this.pointingConfig = n.pointingConfig || this.pointingConfig) : this.type === "pointing" ? (this.btn = document.getElementsByClassName(n.pointingBtn), this.pointingConfig = n.pointingConfig || this.pointingConfig) : this.signaturePad = new SignaturePad(this.cvs);
	this.signaturePad.penColor= warna;
	this.signaturePad.minWidth= 1.5;
	this.signaturePad.maxWidth= 1.5;
	this.signaturePad.throttle= 0;
	this.detectSetData = null;
	// signaturePad.velocityFilterWeight= .1;

	
	this.init()
}
Coret.prototype.redrawFromHistory = function () {
	let retryCount = 0;
	this.detectSetData = setInterval(() => {
		const imgSrc = $(`img.${this.imgData.id}`).attr('src');
		// console.log(imgSrc)
		retryCount++
		if (imgSrc != undefined){
			if (!imgSrc.includes('assets')) {
				clearInterval(this.detectSetData);
				const imgStorage = document.querySelector(`#assesment-content img.${this.imgData.name}`);
				this.ctx.drawImage(imgStorage, 0, 0)
			}
		}

		if (retryCount > 5) clearInterval(this.detectSetData);
	}, 2000);
};
Coret.prototype.insertElAfter = function (n, t) {
	t.parentNode.insertBefore(n, t.nextSibling)
};
Coret.prototype.toggleAlert = function (n) {
	n === "done" ? (this.notDone.style.display = "none", this.done.style.display = "block") : (this.notDone.style.display = "block", this.done.style.display = "none")
};
Coret.prototype.cekSimpan = function () {
	if (this.imgData.value) {
		if (this.imgData.value !== "") {
			const n = this.cvs.toDataURL("image/jpeg");
			n !== this.imgData.value ? this.toggleAlert("no") : this.toggleAlert("done")
		}
	} else this.toggleAlert("no")
};
Coret.prototype.saveToHist = function () {
	this.historyNumber++;
	this.historyNumber < this.saveHistory.length && (this.saveHistory.length = this.historyNumber);
	this.saveHistory.push(this.cvs.toDataURL())
};
Coret.prototype.undo = function () {
	this.historyNumber >= 0 && (this.img.src = this.saveHistory[this.historyNumber], this.historyNumber--)
};
Coret.prototype.removeBtnInfoClass = function () {
	for (let n = 0; n < this.btn.length; n++) this.btn[n].classList.remove("btn-info")
};
Coret.prototype.mousePosition = function (n, t) {
	const i = n.getBoundingClientRect();
	return {
		x: t.clientX - i.left,
		y: t.clientY - i.top
	}
};
Coret.prototype.markOnPoint = function (n) {
	if (this.textMark) {
		const i = this.pointingConfig.hasOwnProperty("fontColor") ? this.pointingConfig.fontColor : "red",
		r = this.pointingConfig.hasOwnProperty("fontSize") ? this.pointingConfig.fontSize : "24px",
		u = this.pointingConfig.hasOwnProperty("fontFamily") ? this.pointingConfig.fontFamily : "Arial",
		t = n;
		t.font = `bold ${r} ${u}`;
		t.fillStyle = i;
		t.fillText(this.textMark, this.posX, this.posY)
	}
};
Coret.prototype.init = function () {
	const n = this;
	this.redrawFromHistory();
	if (this.insertElAfter(n.opr_tray, n.cvs), this.type !== "pointing" && (this.startBtn = this.opr_tray.querySelector(".start"), this.startBtn.addEventListener("click", function () {
		n.type === "hybrid" && (n.removeBtnInfoClass(), n.textMark = null);
		n.signaturePad.on()

	})), this.type !== "default") {
		for (let t = 0; t < this.btn.length; t++) this.btn[t].addEventListener("click", function (t) {
			n.type === "hybrid" && n.signaturePad.off();
			n.removeBtnInfoClass();
			t.target.classList.add("btn-info");
			n.textMark = t.target.value
		});
			this.cvs.addEventListener("mousemove", function (t) {
				const i = n.mousePosition(n.cvs, t);
				n.posX = i.x - 5;
				n.posY = i.y + 5
			});
			this.cvs.addEventListener("click", function () {
				n.markOnPoint(n.ctx)
			})
		}
		this.cvs.addEventListener("mousedown", function () {
			n.saveToHist();
			n.cekSimpan()
		});
		this.stopBtn.addEventListener("click", function () {
			n.type !== "pointing" && (n.signaturePad.off(), n.imgData.value = n.cvs.toDataURL("image/jpeg"));
			n.type !== "default" && (n.textMark = null, n.removeBtnInfoClass(), n.imgData.value = n.cvs.toDataURL("image/jpeg"));
			n.cekSimpan()
		});
		
		this.undoBtn.addEventListener("click", function () {
			n.undo()
		})
		this.clearBtn.addEventListener("click", function () {
			const t = confirm("Bersihkan tanda?");
			t === !0 && (n.type !== "pointing" && (n.signaturePad.clear(), n.signaturePad.on()), n.img.src = n.src, n.cekSimpan())
		});
		this.warnaBtn.addEventListener("change", function () {
			n.signaturePad.penColor= this.value;
		})
	};